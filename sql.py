from dotenv import load_dotenv
load_dotenv() ## Laod all the environment Variables

import streamlit as st 
import os
import sqlite3

import google.generativeai as genai
##Configure  Genai Key 

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

##Function to Load Google Gemini Model And Provide Query As Response
## Below Model is Responsible for Giving Query 
def get_gemini_response(question,prompt):
    model=genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0],question])
    return response.text

##Function to Retrive the Query from Database

def read_sql_query(sql,db):
    conn=sqlite3.connect(db)
    cur=conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()
    for row in rows:
        print(row)
    return rows

##Most IMportant step : """"Defining Your Prompt """"    

prompt =[
    """
    You are an expert in converting English questions to SQL query!
    The SQL database has the name STUDENT and has the following columns - NAME,CLASS,
    SECTION \n\nFor example, \nExample 1- How many entries of records are present?,
    the SQL command will be something like this SELECT COUNT(*) FROM STUDENT;
    \nExample 2- Tell me all the students studying in Data Science class?,
    the SQL command will be something like this SELECT * FROM STUDENT 
    where CLASS="Data Science";
    also the sql code should not have '''in beginning or end and sql word in output 

    """
]

## Streamlit App

st.set_page_config(page_title ="I can Retrieve Any SQL Query ")
st.header("Gemini App to Retrieve SQL Data")

question=st.text_input("Input:",key="input")

submit=st.button("Ask the question")

#if Submit is Clicked

if submit:
    response=get_gemini_response(question,prompt)
    print(response)
    response=read_sql_query(response,"student.db")
    st.subheader("The Response is ")
    print(response)
    for row in response:
        print(row)
        st.header(row)

# if submit:
#     response = get_gemini_response(question, prompt)
#     st.subheader("The Response is ")
#     # Printing the SQL query generated by Gemini
#     st.write("Generated SQL Query:", response)
    
#     # Reading the SQL query result from the database
#     result = read_sql_query(response, "student.db")
    
#     # Displaying the result in a table format
#     st.write("Result:")
#     st.table(result)
